/**
 * Tests pour la cr√©ation d'affectations
 */

export const testAffectationCreation = () => {
  console.log('üß™ Test de cr√©ation d\'affectation...');
  
  // Simuler les donn√©es d'une affectation
  const testAffectationData = {
    idSalle: 1,
    typeactivite: 'Test Cr√©ation',
    date: new Date().toISOString().split('T')[0],
    heuredebut: '14:00',
    heurefin: '15:00',
    description: 'Test de cr√©ation d\'affectation'
  };
  
  console.log('üìù Donn√©es de test:', testAffectationData);
  
  // V√©rifier que les donn√©es ont le bon format
  const hasRequiredFields = testAffectationData.idSalle && 
                           testAffectationData.typeactivite && 
                           testAffectationData.date && 
                           testAffectationData.heuredebut && 
                           testAffectationData.heurefin;
  
  console.log('‚úÖ Champs requis pr√©sents:', hasRequiredFields);
  
  // V√©rifier les types de donn√©es
  console.log('üîç Types de donn√©es:', {
    idSalle: typeof testAffectationData.idSalle,
    typeactivite: typeof testAffectationData.typeactivite,
    date: typeof testAffectationData.date,
    heuredebut: typeof testAffectationData.heuredebut,
    heurefin: typeof testAffectationData.heurefin
  });
  
  return testAffectationData;
};

export const testSalleStructure = () => {
  console.log('üß™ Test de la structure des salles...');
  
  // R√©cup√©rer les salles depuis le localStorage ou les variables globales
  const salles = JSON.parse(localStorage.getItem('salles')) || [];
  
  if (salles.length > 0) {
    const sample = salle = salles[0];
    console.log('üîç √âchantillon de salle:', sample);
    
    // V√©rifier les champs requis
    const requiredFields = {
      idSalle: sample.idSalle,
      nomSalle: sample.nomSalle,
      capacite: sample.capacite,
      typeSalle: sample.typeSalle
    };
    
    console.log('‚úÖ Champs requis:', requiredFields);
    
    // V√©rifier les types
    const fieldTypes = {
      idSalle: typeof sample.idSalle,
      nomSalle: typeof sample.nomSalle,
      capacite: typeof sample.capacite,
      typeSalle: typeof sample.typeSalle
    };
    
    console.log('üîç Types des champs:', fieldTypes);
    
    // V√©rifier si idSalle existe
    const hasIdSalle = 'idSalle' in sample;
    const hasId = 'id' in sample;
    
    console.log('üîç Pr√©sence des champs ID:', {
      hasIdSalle,
      hasId,
      idSalleValue: sample.idSalle,
      idValue: sample.id
    });
    
    return { sample, requiredFields, fieldTypes, hasIdSalle, hasId };
  } else {
    console.log('‚ö†Ô∏è Aucune salle trouv√©e');
    return null;
  }
};

export const testDataStructureComparison = () => {
  console.log('üß™ Test de comparaison des structures de donn√©es...');
  
  // Structure attendue par le backend (bas√©e sur le calendrier)
  const expectedStructure = {
    idSalle: 'number',
    typeactivite: 'string',
    date: 'string',
    heuredebut: 'string',
    heurefin: 'string'
  };
  
  console.log('üìã Structure attendue par le backend:', expectedStructure);
  
  // Structure envoy√©e par le tableau
  const tableStructure = {
    idSalle: 'number',
    typeactivite: 'string',
    date: 'string',
    heuredebut: 'string',
    heurefin: 'string'
  };
  
  console.log('üìä Structure envoy√©e par le tableau:', tableStructure);
  
  // Structure envoy√©e par le modal (premi√®re tentative)
  const modalStructure1 = {
    idSalle: 'number',
    typeActivite: 'string', // ‚ùå Majuscule
    date: 'string',
    heureDebut: 'string',   // ‚ùå Majuscule
    heureFin: 'string'      // ‚ùå Majuscule
  };
  
  console.log('üî¥ Structure envoy√©e par le modal (1√®re tentative):', modalStructure1);
  
  // Structure envoy√©e par le modal (deuxi√®me tentative)
  const modalStructure2 = {
    idSalle: 'number',
    typeactivite: 'string', // ‚úÖ Lowercase
    date: 'string',
    heuredebut: 'string',   // ‚úÖ Lowercase
    heurefin: 'string'      // ‚úÖ Lowercase
  };
  
  console.log('üü¢ Structure envoy√©e par le modal (2√®me tentative):', modalStructure2);
  
  // V√©rifier la coh√©rence
  const tableMatchesExpected = JSON.stringify(tableStructure) === JSON.stringify(expectedStructure);
  const modal2MatchesExpected = JSON.stringify(modalStructure2) === JSON.stringify(expectedStructure);
  
  console.log('üîç R√©sultats de la comparaison:', {
    tableMatchesExpected,
    modal2MatchesExpected,
    recommendation: tableMatchesExpected ? '‚úÖ Tableau coh√©rent' : '‚ùå Tableau incoh√©rent'
  });
  
  return {
    expectedStructure,
    tableStructure,
    modalStructure1,
    modalStructure2,
    tableMatchesExpected,
    modal2MatchesExpected
  };
};

export const testBackendExpectations = () => {
  console.log('üß™ Test des attentes du backend...');
  
  // Test 1: idSalle comme string
  const testData1 = {
    idSalle: '20', // String au lieu de number
    typeactivite: 'Test String ID',
    date: '2025-08-17',
    heuredebut: '20:00',
    heurefin: '21:00'
  };
  
  // Test 2: idSalle comme number
  const testData2 = {
    idSalle: 20, // Number
    typeactivite: 'Test Number ID',
    date: '2025-08-17',
    heuredebut: '20:00',
    heurefin: '21:00'
  };
  
  // Test 3: Avec champs suppl√©mentaires possibles
  const testData3 = {
    idSalle: 20,
    typeactivite: 'Test Extra Fields',
    date: '2025-08-17',
    heuredebut: '20:00',
    heurefin: '21:00',
    description: 'Test description',
    status: 'pending',
    requesterId: 1
  };
  
  // Test 4: Format de date diff√©rent
  const testData4 = {
    idSalle: 20,
    typeactivite: 'Test Date Format',
    date: new Date('2025-08-17').toISOString(), // Date compl√®te
    heuredebut: '20:00',
    heurefin: '21:00'
  };
  
  console.log('üîç Tests de formats de donn√©es:');
  console.log('Test 1 - idSalle string:', testData1);
  console.log('Test 2 - idSalle number:', testData2);
  console.log('Test 3 - Champs suppl√©mentaires:', testData3);
  console.log('Test 4 - Format de date complet:', testData4);
  
  return {
    testData1,
    testData2,
    testData3,
    testData4
  };
};

export const testAffectationService = async () => {
  console.log('üß™ Test du service d\'affectation...');
  
  try {
    // Importer le service
    const { default: affectationService } = await import('../services/affectationService');
    
    // Tester la r√©cup√©ration des affectations
    console.log('üîÑ Test de r√©cup√©ration des affectations...');
    const affectations = await affectationService.getAllAffectations();
    console.log('‚úÖ Affectations r√©cup√©r√©es:', affectations.length);
    
    // Tester la cr√©ation d'une affectation
    console.log('üîÑ Test de cr√©ation d\'affectation...');
    const testData = testAffectationCreation();
    
    try {
      const newAffectation = await affectationService.createAffectation(testData);
      console.log('‚úÖ Affectation cr√©√©e avec succ√®s:', newAffectation);
      
      // Nettoyer - supprimer l'affectation de test
      if (newAffectation.idaffectation) {
        console.log('üîÑ Nettoyage - suppression de l\'affectation de test...');
        await affectationService.deleteAffectation(newAffectation.idaffectation);
        console.log('‚úÖ Affectation de test supprim√©e');
      }
      
      return { success: true, newAffectation };
    } catch (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation:', createError);
      return { success: false, error: createError };
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test du service:', error);
    return { success: false, error };
  }
};

export const testAffectationDisplay = () => {
  console.log('üß™ Test de l\'affichage des affectations...');
  
  // V√©rifier les cellules d'affectation
  const affectationCells = document.querySelectorAll('[data-affectation-cell]');
  console.log('üî¥ Cellules d\'affectation trouv√©es:', affectationCells.length);
  
  // V√©rifier les cellules libres
  const availableCells = document.querySelectorAll('[data-available-cell]');
  console.log('üü¢ Cellules libres trouv√©es:', availableCells.length);
  
  // V√©rifier les salles
  const salleRows = document.querySelectorAll('[data-salle-row]');
  console.log('üè¢ Lignes de salles trouv√©es:', salleRows.length);
  
  // V√©rifier les blocs
  const blocHeaders = document.querySelectorAll('[data-bloc-header]');
  console.log('üè¢ En-t√™tes de blocs trouv√©s:', blocHeaders.length);
  
  return {
    affectationCellsCount: affectationCells.length,
    availableCellsCount: availableCells.length,
    salleRowsCount: salleRows.length,
    blocHeadersCount: blocHeaders.length
  };
};

export const testAffectationDataFormat = () => {
  console.log('üß™ Test du format des donn√©es d\'affectation...');
  
  // R√©cup√©rer les affectations depuis le localStorage ou les variables globales
  const affectations = JSON.parse(localStorage.getItem('affectations')) || [];
  
  if (affectations.length > 0) {
    const sample = affectations[0];
    console.log('üîç √âchantillon d\'affectation:', sample);
    
    // V√©rifier les champs requis
    const requiredFields = {
      idaffectation: sample.idaffectation,
      typeactivite: sample.typeactivite,
      date: sample.date,
      heuredebut: sample.heuredebut,
      heurefin: sample.heurefin,
      idSalle: sample.idSalle
    };
    
    console.log('‚úÖ Champs requis:', requiredFields);
    
    // V√©rifier les types
    const fieldTypes = {
      idaffectation: typeof sample.idaffectation,
      typeactivite: typeof sample.typeactivite,
      date: typeof sample.date,
      heuredebut: typeof sample.heuredebut,
      heurefin: typeof sample.heurefin,
      idSalle: typeof sample.idSalle
    };
    
    console.log('üîç Types des champs:', fieldTypes);
    
    return { sample, requiredFields, fieldTypes };
  } else {
    console.log('‚ö†Ô∏è Aucune affectation trouv√©e');
    return null;
  }
};

export const runAllAffectationCreationTests = async () => {
  console.log('üöÄ Lancement de tous les tests de cr√©ation d\'affectation...');
  console.log('='.repeat(60));
  
  // Test 1: Format des donn√©es
  console.log('üìã Test 1: Format des donn√©es');
  const testData = testAffectationCreation();
  console.log('-'.repeat(40));
  
  // Test 2: Structure des salles
  console.log('üè¢ Test 2: Structure des salles');
  const salleStructure = testSalleStructure();
  console.log('-'.repeat(40));
  
  // Test 3: Comparaison des structures
  console.log('üîç Test 3: Comparaison des structures de donn√©es');
  const structureComparison = testDataStructureComparison();
  console.log('-'.repeat(40));
  
  // Test 4: Attentes du backend
  console.log('üîç Test 4: Attentes du backend');
  const backendExpectations = testBackendExpectations();
  console.log('-'.repeat(40));
  
  // Test 5: Affichage
  console.log('üìä Test 5: Affichage des affectations');
  const displayResults = testAffectationDisplay();
  console.log('-'.repeat(40));
  
  // Test 6: Format des donn√©es existantes
  console.log('üîç Test 6: Format des donn√©es existantes');
  const dataFormat = testAffectationDataFormat();
  console.log('-'.repeat(40));
  
  // Test 7: Service (optionnel - peut √©chouer si pas de backend)
  console.log('üîß Test 7: Service d\'affectation');
  try {
    const serviceResults = await testAffectationService();
    console.log('‚úÖ Service test√©:', serviceResults);
  } catch (error) {
    console.log('‚ö†Ô∏è Service non test√© (backend non disponible):', error.message);
  }
  console.log('-'.repeat(40));
  
  console.log('üìä R√©sultats des tests:', {
    testData,
    salleStructure,
    structureComparison,
    backendExpectations,
    displayResults,
    dataFormat
  });
  console.log('='.repeat(60));
  
  return {
    testData,
    salleStructure,
    structureComparison,
    backendExpectations,
    displayResults,
    dataFormat
  };
};

// Exposer les fonctions globalement pour les tests
window.testAffectationCreation = testAffectationCreation;
window.testSalleStructure = testSalleStructure;
window.testDataStructureComparison = testDataStructureComparison;
window.testBackendExpectations = testBackendExpectations;
window.testAffectationService = testAffectationService;
window.testAffectationDisplay = testAffectationDisplay;
window.testAffectationDataFormat = testAffectationDataFormat;
window.runAllAffectationCreationTests = runAllAffectationCreationTests;

export default {
  testAffectationCreation,
  testSalleStructure,
  testDataStructureComparison,
  testBackendExpectations,
  testAffectationService,
  testAffectationDisplay,
  testAffectationDataFormat,
  runAllAffectationCreationTests
};
