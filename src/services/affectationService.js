import api from '../utils/api';

const affectationService = {
  // ===== AFFECTATIONS =====
  async getAllAffectations() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration de toutes les affectations...');
      const response = await api.get('/api/affectations');
      console.log('‚úÖ AffectationService: Affectations r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des affectations:', error);
      throw error;
    }
  },

  async createAffectation(affectationData) {
    try {
      // Validation des donn√©es requises - accepter les deux formats (camelCase et lowercase)
      const hasRequiredFields = affectationData.idSalle && 
        (affectationData.typeActivite || affectationData.typeactivite) && 
        affectationData.date && 
        (affectationData.heureDebut || affectationData.heuredebut) && 
        (affectationData.heureFin || affectationData.heurefin);
        
      if (!hasRequiredFields) {
        const missingFields = [];
        if (!affectationData.idSalle) missingFields.push('idSalle');
        if (!affectationData.typeActivite && !affectationData.typeactivite) missingFields.push('typeActivite/typeactivite');
        if (!affectationData.date) missingFields.push('date');
        if (!affectationData.heureDebut && !affectationData.heuredebut) missingFields.push('heureDebut/heuredebut');
        if (!affectationData.heureFin && !affectationData.heurefin) missingFields.push('heureFin/heurefin');
        
        console.error('‚ùå AffectationService: Champs manquants:', missingFields);
        console.error('‚ùå AffectationService: Donn√©es re√ßues:', affectationData);
        throw new Error(`Champs manquants: ${missingFields.join(', ')}`);
      }
      
      // Normaliser les donn√©es pour utiliser le format camelCase (comme les recommandations IA)
      const normalizedData = {
        idSalle: affectationData.idSalle,
        typeActivite: affectationData.typeActivite || affectationData.typeactivite,
        date: affectationData.date,
        heureDebut: affectationData.heureDebut || affectationData.heuredebut,
        heureFin: affectationData.heureFin || affectationData.heurefin
      };
      
      const response = await api.post('/api/affectations', normalizedData);
      
      // V√©rifier si la r√©ponse contient une affectation cr√©√©e
      if (response.data && response.data.affectation) {
        return response.data.affectation;
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la cr√©ation de l\'affectation:', error);

      
      if (error.response?.status === 400) {
        console.error('üîç AffectationService: Erreur 400 - Payload envoy√©:', affectationData);
        console.error('üîç AffectationService: R√©ponse du serveur:', error.response.data);
      }
      
      throw error;
    }
  },

  async updateAffectation(id, affectationData) {
    try {

      const response = await api.put(`/api/affectations/${id}`, affectationData);

      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la mise √† jour de l\'affectation:', error);
      throw error;
    }
  },

  async deleteAffectation(id) {
    try {

      const response = await api.delete(`/api/affectations/${id}`);

      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la suppression de l\'affectation:', error);
      throw error;
    }
  },

  // ===== APPROVAL WORKFLOW =====
  async getPendingAffectations() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des affectations en attente...');
      const response = await api.get('/api/affectations/pending');
      console.log('‚úÖ AffectationService: Affectations en attente r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des affectations en attente:', error);
      throw error;
    }
  },

  async getMyPendingAffectations() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration de mes affectations en attente...');
      const response = await api.get('/api/affectations/my-pending');
      console.log('‚úÖ AffectationService: Mes affectations en attente r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration de mes affectations en attente:', error);
      throw error;
    }
  },

  async approveAffectation(id, approvalData = {}) {
    try {
      console.log('üîÑ AffectationService: Approbation de l\'affectation:', id);
      try {
        const response = await api.post(`/api/affectations/${id}/approve`, {
          approved: true,
          approverId: approvalData.approverId,
          approvalTime: new Date().toISOString(),
          ...approvalData
        });
        console.log('‚úÖ AffectationService: Affectation approuv√©e via endpoint approve:', response.data);
        return response.data;
      } catch (approvalError) {
        console.log('‚ö†Ô∏è Endpoint approve non disponible, tentative avec update...');
        const response = await api.put(`/api/affectations/${id}`, {
          status: 'approved',
          approverId: approvalData.approverId,
          approvalTime: new Date().toISOString(),
          ...approvalData
        });
        console.log('‚úÖ AffectationService: Affectation approuv√©e via update:', response.data);
        return response.data;
      }
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de l\'approbation:', error);
      throw error;
    }
  },

  async rejectAffectation(id, rejectionData = {}) {
    try {
      console.log('üîÑ AffectationService: Rejet de l\'affectation:', id);
      try {
        const response = await api.post(`/api/affectations/${id}/approve`, {
          approved: false,
          approverId: rejectionData.approverId,
          approvalTime: new Date().toISOString(),
          rejectionReason: rejectionData.rejectionReason,
          ...rejectionData
        });
        console.log('‚úÖ AffectationService: Affectation rejet√©e via endpoint approve:', response.data);
        return response.data;
      } catch (approvalError) {
        console.log('‚ö†Ô∏è Endpoint approve non disponible, tentative avec update...');
        const response = await api.put(`/api/affectations/${id}`, {
          status: 'rejected',
          approverId: rejectionData.approverId,
          approvalTime: new Date().toISOString(),
          rejectionReason: rejectionData.rejectionReason,
          ...rejectionData
        });
        console.log('‚úÖ AffectationService: Affectation rejet√©e via update:', response.data);
      return response.data;
      }
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors du rejet:', error);
      throw error;
    }
  },

  // ===== SALLES (ANCIENNES) =====
  async getSalles() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des salles...');
      const response = await api.get('/api/salles');
      console.log('‚úÖ AffectationService: Salles r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des salles:', error);
      throw error;
    }
  },

  async getSallesWithDetails() {
    try {
      const response = await api.get('/api/salles');
      
      // V√©rifier que les salles ont bien les informations hi√©rarchiques
      const sallesWithDetails = response.data.map(salle => {
        if (!salle.blocNom || !salle.etageNumero) {
          console.warn('‚ö†Ô∏è Salle sans informations hi√©rarchiques compl√®tes:', salle);
        }
        return salle;
      });
      
      return sallesWithDetails;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des salles avec d√©tails:', error);
      
      // Mode d√©veloppement: donn√©es de test si l'endpoint n'est pas disponible
      if (error.response?.status === 404 || error.response?.status === 500 || error.code === 'ERR_BAD_RESPONSE') {
        console.log('üîÑ Mode d√©veloppement: Utilisation de donn√©es de test pour les salles');
        
        const mockSalles = [
          {
            idSalle: 1,
            nomSalle: 'Salle 101',
            typeSalle: 'Amphith√©√¢tre',
            capacite: 120,
            blocNom: 'Bloc A',
            etageNumero: '1er √©tage',
            etageId: 1,
            blocId: 1
          },
          {
            idSalle: 2,
            nomSalle: 'Salle 102',
            typeSalle: 'Salle de cours',
            capacite: 30,
            blocNom: 'Bloc A',
            etageNumero: '1er √©tage',
            etageId: 1,
            blocId: 1
          },
          {
            idSalle: 3,
            nomSalle: 'Salle 201',
            typeSalle: 'Laboratoire',
            capacite: 25,
            blocNom: 'Bloc A',
            etageNumero: '2√®me √©tage',
            etageId: 2,
            blocId: 1
          },
          {
            idSalle: 4,
            nomSalle: 'Salle RDC-01',
            typeSalle: 'Salle de r√©union',
            capacite: 15,
            blocNom: 'Bloc B',
            etageNumero: 'Rez-de-chauss√©e',
            etageId: 3,
            blocId: 2
          },
          {
            idSalle: 5,
            nomSalle: 'Salle 101-B',
            typeSalle: 'Salle informatique',
            capacite: 20,
            blocNom: 'Bloc B',
            etageNumero: '1er √©tage',
            etageId: 4,
            blocId: 2
          }
        ];
        return mockSalles;
      }
      
      throw error;
    }
  },

  // ===== NOUVELLES FONCTIONNALIT√âS HI√âRARCHIQUES =====
  
  // ===== GESTION DES BLOCS =====
    async testAllEndpoints() {
    try {
      console.log('üß™ AffectationService: Test complet de tous les endpoints...');
      
      // Test de connectivit√© g√©n√©rale
      try {
        const healthResponse = await api.get('/api/health');
        console.log('‚úÖ Connectivit√© backend OK:', healthResponse.status);
      } catch (error) {
        console.log('‚ö†Ô∏è Endpoint /api/health non disponible, test de connectivit√© de base...');
        try {
          const baseResponse = await api.get('/');
          console.log('‚úÖ Connectivit√© de base OK:', baseResponse.status);
        } catch (baseError) {
          console.log('‚ùå Probl√®me de connectivit√©:', baseError.message);
        }
      }
      
      // Test GET /api/blocs
      try {
        const response = await api.get('/api/blocs');
        console.log('‚úÖ GET /api/blocs fonctionne:', response.status, response.data?.length || 0, 'blocs trouv√©s');
      } catch (error) {
        console.log('‚ùå GET /api/blocs √©choue:', error.response?.status, error.response?.statusText);
        if (error.response?.status === 404) {
          console.log('üí° Endpoint /api/blocs non impl√©ment√© c√¥t√© backend');
        }
      }
      
      // Test GET /api/salles
      try {
        const sallesResponse = await api.get('/api/salles');
        console.log('‚úÖ GET /api/salles fonctionne:', sallesResponse.status, sallesResponse.data?.length || 0, 'salles trouv√©es');
        if (sallesResponse.data?.length > 0) {
          console.log('üìã Exemple de salle:', sallesResponse.data[0]);
        }
      } catch (error) {
        console.log('‚ùå GET /api/salles √©choue:', error.response?.status, error.response?.statusText);
        if (error.response?.status === 404) {
          console.log('üí° Endpoint /api/salles non impl√©ment√© c√¥t√© backend');
        } else if (error.response?.status === 500) {
          console.log('üí° Endpoint /api/salles retourne une erreur 500 - probl√®me backend');
        }
      }
      
      // Test POST /api/blocs
      try {
        const testBlocData = { nom: 'Test Bloc ' + Date.now() };
        const response = await api.post('/api/blocs', testBlocData);
        console.log('‚úÖ POST /api/blocs fonctionne:', response.status, 'Bloc cr√©√©:', response.data);
        
        // Test GET /api/etages
        try {
          const etagesResponse = await api.get('/api/etages');
          console.log('‚úÖ GET /api/etages fonctionne:', etagesResponse.status, etagesResponse.data?.length || 0, '√©tages trouv√©s');
        } catch (error) {
          console.log('‚ùå GET /api/etages √©choue:', error.response?.status, error.response?.statusText);
          if (error.response?.status === 404) {
            console.log('üí° Endpoint /api/etages non impl√©ment√© c√¥t√© backend');
          }
        }
        
        // Test POST /api/etages
        try {
          const testEtageData = { 
            numero: 'Test √âtage ' + Date.now(),
            blocId: response.data.id || 1
          };
          const etageResponse = await api.post('/api/etages', testEtageData);
          console.log('‚úÖ POST /api/etages fonctionne:', etageResponse.status, '√âtage cr√©√©:', etageResponse.data);
          
          // Test GET /api/etages/bloc/{blocId}
          try {
            const blocId = response.data.id || 1;
            const etagesByBlocResponse = await api.get(`/api/etages/bloc/${blocId}`);
            console.log('‚úÖ GET /api/etages/bloc/{blocId} fonctionne:', etagesByBlocResponse.status, etagesByBlocResponse.data?.length || 0, '√©tages trouv√©s pour ce bloc');
          } catch (error) {
            console.log('‚ùå GET /api/etages/bloc/{blocId} √©choue:', error.response?.status, error.response?.statusText);
            if (error.response?.status === 404) {
              console.log('üí° Endpoint /api/etages/bloc/{blocId} non impl√©ment√© c√¥t√© backend');
            }
          }
          
        } catch (error) {
          console.log('‚ùå POST /api/etages √©choue:', error.response?.status, error.response?.statusText);
          if (error.response?.status === 404) {
            console.log('üí° Endpoint /api/etages non impl√©ment√© c√¥t√© backend');
          }
        }
        
      } catch (error) {
        console.log('‚ùå POST /api/blocs √©choue:', error.response?.status, error.response?.statusText);
        if (error.response?.status === 404) {
          console.log('üí° Endpoint /api/blocs non impl√©ment√© c√¥t√© backend');
        }
      }
      
      console.log('üéØ R√©sum√©: Si vous voyez des erreurs 404, les endpoints ne sont pas encore impl√©ment√©s c√¥t√© backend.');
      console.log('üí° Le frontend utilise actuellement des donn√©es de test pour le d√©veloppement.');
      console.log('‚ö†Ô∏è IMPORTANT: Si GET /api/salles √©choue, les salles cr√©√©es ne seront pas visibles apr√®s refresh!');
      
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors du test des endpoints:', error);
    }
  },

  async testBlocEndpoints() {
    try {
      console.log('üß™ AffectationService: Test des endpoints blocs...');
      
      // Test GET /api/blocs
      try {
        const response = await api.get('/api/blocs');
        console.log('‚úÖ GET /api/blocs fonctionne:', response.status);
      } catch (error) {
        console.log('‚ùå GET /api/blocs √©choue:', error.response?.status, error.response?.statusText);
      }
      
      // Test POST /api/blocs
      try {
        const testData = { nom: 'Test Bloc' };
        const response = await api.post('/api/blocs', testData);
        console.log('‚úÖ POST /api/blocs fonctionne:', response.status);
      } catch (error) {
        console.log('‚ùå POST /api/blocs √©choue:', error.response?.status, error.response?.statusText);
      }
      
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors du test des endpoints:', error);
    }
  },

  async testSalleEndpoints() {
    try {
      console.log('üß™ AffectationService: Test des endpoints salles...');
      
      // Test GET /api/salles
      try {
        const response = await api.get('/api/salles');
        console.log('‚úÖ GET /api/salles fonctionne:', response.status, response.data?.length || 0, 'salles trouv√©es');
        if (response.data?.length > 0) {
          console.log('üìã Premi√®re salle:', response.data[0]);
          console.log('üîç V√©rification des informations hi√©rarchiques:');
          console.log('   - blocNom:', response.data[0].blocNom);
          console.log('   - etageNumero:', response.data[0].etageNumero);
          console.log('   - blocId:', response.data[0].blocId);
          console.log('   - etageId:', response.data[0].etageId);
        }
      } catch (error) {
        console.log('‚ùå GET /api/salles √©choue:', error.response?.status, error.response?.statusText);
        console.log('üìä D√©tails de l\'erreur:', {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message
        });
      }
      
      // Test POST /api/salles (si vous voulez tester la cr√©ation)
      try {
        const testSalleData = { 
          nom: 'Test Salle ' + Date.now(),
          capacite: 30,
          type: 'Salle de test',
          etageId: 1  // Assurez-vous que cet √©tage existe
        };
        const response = await api.post('/api/salles', testSalleData);
        console.log('‚úÖ POST /api/salles fonctionne:', response.status, 'Salle cr√©√©e:', response.data);
      } catch (error) {
        console.log('‚ùå POST /api/salles √©choue:', error.response?.status, error.response?.statusText);
        console.log('üìä D√©tails de l\'erreur:', {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message
        });
      }
      
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors du test des endpoints salles:', error);
    }
  },

  async testSallesEndpointOnly() {
    try {
      console.log('üß™ AffectationService: Test sp√©cifique de GET /api/salles...');
      
      const response = await api.get('/api/salles');
      console.log('‚úÖ GET /api/salles SUCC√àS:', {
        status: response.status,
        statusText: response.statusText,
        sallesCount: response.data?.length || 0,
        headers: response.headers,
        config: response.config
      });
      
      if (response.data?.length > 0) {
        console.log('üìã Exemples de salles:');
        response.data.slice(0, 3).forEach((salle, index) => {
          console.log(`  ${index + 1}. Salle:`, {
            id: salle.id || salle.idSalle,
            nom: salle.nom || salle.nomSalle,
            type: salle.type || salle.typeSalle,
            capacite: salle.capacite,
            etageId: salle.etageId,
            blocId: salle.blocId,
            blocNom: salle.blocNom,
            etageNumero: salle.etageNumero
          });
        });
      } else {
        console.log('‚ö†Ô∏è Aucune salle trouv√©e dans la r√©ponse');
      }
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå GET /api/salles √âCHEC:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        code: error.code,
        config: error.config
      });
      
      // Essayer de diagnostiquer le probl√®me
      if (error.response?.status === 404) {
        console.log('üí° Endpoint /api/salles non trouv√© (404) - V√©rifiez la route backend');
      } else if (error.response?.status === 500) {
        console.log('üí° Erreur serveur (500) - Probl√®me c√¥t√© backend');
      } else if (error.code === 'ERR_BAD_RESPONSE') {
        console.log('üí° Erreur de r√©ponse - V√©rifiez que le backend est d√©marr√©');
      } else if (error.message?.includes('Network Error')) {
        console.log('üí° Erreur r√©seau - V√©rifiez la connectivit√©');
      }
      
      throw error;
    }
  },

  async getSallesWithCompleteHierarchy() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des salles avec hi√©rarchie compl√®te...');
      
      // R√©cup√©rer toutes les donn√©es
      const [sallesResponse, blocsResponse, etagesResponse] = await Promise.all([
        api.get('/api/salles'),
        api.get('/api/blocs'),
        api.get('/api/etages')
      ]);
      
      const salles = sallesResponse.data;
      const blocs = blocsResponse.data;
      const etages = etagesResponse.data;
      
      console.log('üìä Donn√©es r√©cup√©r√©es:', {
        salles: salles.length,
        blocs: blocs.length,
        etages: etages.length
      });
      
      // Enrichir les salles avec les informations hi√©rarchiques
      const sallesWithHierarchy = salles.map(salle => {
        const etage = etages.find(e => e.id === salle.etageId);
        const bloc = blocs.find(b => b.id === (etage?.blocId || salle.blocId));
        
        return {
          ...salle,
          blocNom: bloc?.nom || 'Bloc inconnu',
          etageNumero: etage?.numero || '√âtage inconnu',
          blocId: bloc?.id || salle.blocId,
          etageId: etage?.id || salle.etageId
        };
      });
      
      console.log('‚úÖ Salles avec hi√©rarchie compl√®te:', sallesWithHierarchy);
      return sallesWithHierarchy;
      
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration de la hi√©rarchie compl√®te:', error);
      console.error('üìä D√©tails de l\'erreur hi√©rarchie:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        code: error.code
      });
      
      // Fallback: essayer de r√©cup√©rer juste les salles
      try {
        console.log('üîÑ Fallback: R√©cup√©ration des salles de base...');
        const response = await api.get('/api/salles');
        console.log('‚úÖ Fallback r√©ussi, salles r√©cup√©r√©es:', response.data.length);
        return response.data;
      } catch (fallbackError) {
        console.error('‚ùå Fallback √©chou√© aussi:', fallbackError);
        console.error('üìä D√©tails de l\'erreur fallback:', {
          status: fallbackError.response?.status,
          statusText: fallbackError.response?.statusText,
          data: fallbackError.response?.data,
          message: fallbackError.message,
          code: fallbackError.code
        });
        
        // Fallback final: utiliser les donn√©es de test
        console.log('üîÑ Fallback final: Utilisation des donn√©es de test pour les salles');
        console.log('‚ö†Ô∏è ATTENTION: Les salles cr√©√©es en base ne seront pas visibles');
        
        const mockSalles = [
          {
            idSalle: 1,
            nomSalle: 'Salle 101',
            typeSalle: 'Amphith√©√¢tre',
            capacite: 120,
            blocNom: 'Bloc A',
            etageNumero: '1er √©tage',
            etageId: 1,
            blocId: 1
          },
          {
            idSalle: 2,
            nomSalle: 'Salle 102',
            typeSalle: 'Salle de cours',
            capacite: 30,
            blocNom: 'Bloc A',
            etageNumero: '1er √©tage',
            etageId: 1,
            blocId: 1
          },
          {
            idSalle: 3,
            nomSalle: 'Salle 201',
            typeSalle: 'Laboratoire',
            capacite: 25,
            blocNom: 'Bloc A',
            etageNumero: '2√®me √©tage',
            etageId: 2,
            blocId: 1
          }
        ];
        
        return mockSalles;
      }
    }
  },

  async getAllBlocs() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration de tous les blocs...');
      const response = await api.get('/api/blocs');
      console.log('‚úÖ AffectationService: Blocs r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des blocs:', error);
      
      // Mode d√©veloppement: donn√©es de test si l'endpoint n'est pas disponible
      if (error.response?.status === 404 || error.response?.status === 500) {
        console.log('üîÑ Mode d√©veloppement: Utilisation de donn√©es de test pour les blocs');
        const mockBlocs = [
          { id: 1, nom: 'Bloc A', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 2, nom: 'Bloc B', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 3, nom: 'Bloc C', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() }
        ];
        return mockBlocs;
      }
      
      throw error;
    }
  },

  async getBlocById(id) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration du bloc:', id);
      const response = await api.get(`/api/blocs/${id}`);
      console.log('‚úÖ AffectationService: Bloc r√©cup√©r√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration du bloc:', error);
      throw error;
    }
  },

  async createBloc(blocData) {
    try {
      console.log('üîÑ AffectationService: Cr√©ation d\'un nouveau bloc:', blocData);
      console.log('üì° URL:', '/api/blocs');
      console.log('üì¶ Data envoy√©e:', JSON.stringify(blocData, null, 2));
      
      const response = await api.post('/api/blocs', blocData);
      console.log('‚úÖ AffectationService: Bloc cr√©√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la cr√©ation du bloc:', error);
      console.error('üìä D√©tails de l\'erreur:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        config: {
          url: error.config?.url,
          method: error.config?.method,
          data: error.config?.data
        }
      });
      // Ne jamais simuler un succ√®s pour une op√©ration d'√©criture (cr√©ation)
      // Laisser l'erreur remonter pour que l'UI affiche l'√©chec correctement
      throw error;
    }
  },

  async updateBloc(id, blocData) {
    try {
      console.log('üîÑ AffectationService: Mise √† jour du bloc:', id, blocData);
      console.log('üì° URL:', `/api/blocs/${id}`);
      console.log('üì¶ Data envoy√©e:', JSON.stringify(blocData, null, 2));
      
      const response = await api.put(`/api/blocs/${id}`, blocData);
      console.log('‚úÖ AffectationService: Bloc mis √† jour:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la mise √† jour du bloc:', error);
      console.error('üìä D√©tails de l\'erreur:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message,
        config: {
          url: error.config?.url,
          method: error.config?.method,
          data: error.config?.data
        }
      });
      throw error;
    }
  },

  async deleteBloc(id) {
    try {
      console.log('üîÑ AffectationService: Suppression du bloc:', id);
      const response = await api.delete(`/api/blocs/${id}`);
      console.log('‚úÖ AffectationService: Bloc supprim√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la suppression du bloc:', error);
      throw error;
    }
  },

  // ===== GESTION DES √âTAGES =====
  async getAllEtages() {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration de tous les √©tages...');
      const response = await api.get('/api/etages');
      console.log('‚úÖ AffectationService: √âtages r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des √©tages:', error);
      console.error('üìä D√©tails de l\'erreur √©tages:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
      
      // Mode d√©veloppement: donn√©es de test si l'endpoint n'est pas disponible ou en erreur
      if (error.response?.status === 404 || error.response?.status === 500 || error.response?.status === undefined || error.code === 'ERR_BAD_RESPONSE') {
        console.log('üîÑ Mode d√©veloppement: Utilisation de donn√©es de test pour les √©tages (erreur 500 d√©tect√©e)');
        const mockEtages = [
          { id: 1, numero: '1er √©tage', blocId: 1, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 2, numero: '2√®me √©tage', blocId: 1, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 3, numero: 'Rez-de-chauss√©e', blocId: 2, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 4, numero: '1er √©tage', blocId: 2, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() }
        ];
        console.log('‚úÖ Mock √©tages r√©cup√©r√©s:', mockEtages);
        return mockEtages;
      }
      
      throw error;
    }
  },

  async getEtagesByBlocId(blocId) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des √©tages du bloc:', blocId);
      const response = await api.get(`/api/etages/bloc/${blocId}`);
      console.log('‚úÖ AffectationService: √âtages du bloc r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des √©tages du bloc:', error);
      
      // Mode d√©veloppement: filtrer les √©tages de test par blocId
      if (error.response?.status === 404 || error.response?.status === 500 || error.code === 'ERR_BAD_RESPONSE') {
        console.log('üîÑ Mode d√©veloppement: Filtrage des √©tages de test pour le bloc:', blocId);
        const mockEtages = [
          { id: 1, numero: '1er √©tage', blocId: 1, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 2, numero: '2√®me √©tage', blocId: 1, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 3, numero: 'Rez-de-chauss√©e', blocId: 2, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
          { id: 4, numero: '1er √©tage', blocId: 2, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() }
        ];
        const filteredEtages = mockEtages.filter(etage => etage.blocId === blocId);
        console.log('‚úÖ Mock √©tages filtr√©s:', filteredEtages);
        return filteredEtages;
      }
      
      throw error;
    }
  },

  async getEtagesByBlocNom(blocNom) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des √©tages du bloc:', blocNom);
      const response = await api.get(`/api/etages/bloc-nom/${blocNom}`);
      console.log('‚úÖ AffectationService: √âtages du bloc r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des √©tages du bloc:', error);
      throw error;
    }
  },

  async createEtage(etageData) {
    try {
      console.log('üîÑ AffectationService: Cr√©ation d\'un nouvel √©tage:', etageData);
      const response = await api.post('/api/etages', etageData);
      console.log('‚úÖ AffectationService: √âtage cr√©√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la cr√©ation de l\'√©tage:', error);
      // Ne jamais simuler un succ√®s pour une op√©ration d'√©criture (cr√©ation)
      // Laisser l'erreur remonter pour que l'UI affiche l'√©chec correctement
      throw error;
    }
  },

  async updateEtage(id, etageData) {
    try {
      console.log('üîÑ AffectationService: Mise √† jour de l\'√©tage:', id, etageData);
      const response = await api.put(`/api/etages/${id}`, etageData);
      console.log('‚úÖ AffectationService: √âtage mis √† jour:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la mise √† jour de l\'√©tage:', error);
      throw error;
    }
  },

  async deleteEtage(id) {
    try {
      console.log('üîÑ AffectationService: Suppression de l\'√©tage:', id);
      const response = await api.delete(`/api/etages/${id}`);
      console.log('‚úÖ AffectationService: √âtage supprim√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la suppression de l\'√©tage:', error);
      throw error;
    }
  },

  // ===== GESTION DES SALLES (MISE √Ä JOUR) =====
  async getSallesByBlocId(blocId) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des salles du bloc:', blocId);
      const response = await api.get(`/api/salles/bloc/${blocId}`);
      console.log('‚úÖ AffectationService: Salles du bloc r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des salles du bloc:', error);
      throw error;
    }
  },

  async getSallesByBlocNom(blocNom) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des salles du bloc:', blocNom);
      const response = await api.get(`/api/salles/bloc-nom/${blocNom}`);
      console.log('‚úÖ AffectationService: Salles du bloc r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des salles du bloc:', error);
      throw error;
    }
  },

  async getSallesByEtageId(etageId) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des salles de l\'√©tage:', etageId);
      const response = await api.get(`/api/salles/etage/${etageId}`);
      console.log('‚úÖ AffectationService: Salles de l\'√©tage r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des salles de l\'√©tage:', error);
      throw error;
    }
  },

  async getSallesByBlocAndEtage(blocNom, etageNumero) {
    try {
      console.log('üîÑ AffectationService: R√©cup√©ration des salles du bloc et √©tage:', blocNom, etageNumero);
      const response = await api.get(`/api/salles/bloc/${blocNom}/etage/${etageNumero}`);
      console.log('‚úÖ AffectationService: Salles du bloc et √©tage r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des salles du bloc et √©tage:', error);
      throw error;
    }
  },

  async createSalle(salleData) {
    try {
      console.log('üîÑ AffectationService: Cr√©ation d\'une nouvelle salle:', salleData);
      const response = await api.post('/api/salles', salleData);
      console.log('‚úÖ AffectationService: Salle cr√©√©e:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la cr√©ation de la salle:', error);
      throw error;
    }
  },

  async updateSalle(id, salleData) {
    try {
      console.log('üîÑ AffectationService: Mise √† jour de la salle:', id, salleData);
      const response = await api.put(`/api/salles/${id}`, salleData);
      console.log('‚úÖ AffectationService: Salle mise √† jour:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la mise √† jour de la salle:', error);
      throw error;
    }
  },

  async deleteSalle(id) {
    try {
      console.log('üîÑ AffectationService: Suppression de la salle:', id);
      const response = await api.delete(`/api/salles/${id}`);
      console.log('‚úÖ AffectationService: Salle supprim√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la suppression de la salle:', error);
      throw error;
    }
  },

  // ===== SMART RECOMMENDATIONS =====
  async getSmartRoomRecommendations(requestData) {
    try {
      console.log('ü§ñ AffectationService: Demande de recommandations INTELLIGENTES...');
      console.log('üìä Donn√©es envoy√©es:', requestData);
      
      const response = await api.post('/api/smart-recommendations/rooms', requestData);
      console.log('‚úÖ AffectationService: Recommandations INTELLIGENTES re√ßues:', response.data);
      
      // Log intelligent features
      if (response.data.aiReasoning) {
        console.log('üß† Raisonnement IA:', response.data.aiReasoning);
      }
      if (response.data.optimalStrategy) {
        console.log('üéØ Strat√©gie optimale:', response.data.optimalStrategy);
      }
      if (response.data.hasConflicts) {
        console.log('‚ö†Ô∏è Conflits d√©tect√©s:', response.data.conflictResolution);
      }
      if (response.data.alternativeTimeSlots) {
        console.log('üïê Cr√©neaux alternatifs:', response.data.alternativeTimeSlots);
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des recommandations INTELLIGENTES:', error);
      throw error;
    }
  },

  async getConflictResolution(conflictData) {
    try {
      console.log('ü§ñ AffectationService: R√©solution de conflit demand√©e...');
      const response = await api.post('/api/smart-recommendations/conflict-resolution', conflictData);
      console.log('‚úÖ AffectationService: R√©solution de conflit re√ßue:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©solution de conflit:', error);
      throw error;
    }
  },

  async getFormSuggestions(userInput) {
    try {
      console.log('ü§ñ AffectationService: Suggestions de formulaire demand√©es...');
      const response = await api.post('/api/smart-recommendations/form-suggestions', userInput);
      console.log('‚úÖ AffectationService: Suggestions re√ßues:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Erreur lors de la r√©cup√©ration des suggestions:', error);
      throw error;
    }
  },

  async checkSmartRecommendationsHealth() {
    try {
      const response = await api.get('/api/smart-recommendations/health');
      return response.data;
    } catch (error) {
      console.error('‚ùå AffectationService: Service de recommandations indisponible:', error);
      return { status: 'unavailable', error: error.message };
    }
  }
};

export default affectationService; 